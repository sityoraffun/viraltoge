---
// src/components/VideoCard.astro
import { slugify } from '../utils/slugify';
import type { VideoData } from '../utils/data';

export interface Props {
  video: VideoData;
  headingLevel?: 'h2' | 'h3';
}
const url = import.meta.env.PUBLIC_SITE_URL;
const { video, headingLevel = 'h2' } = Astro.props;
const videoSlug = slugify(video.title);
const videoDetailPath = `${url}/${videoSlug}-${video.id}/`;

---

<a href={videoDetailPath} class="video-card">
  <div class="thumbnail-container">
    <img
      src={video.thumbnail}
      alt={video.title}
      title={video.title}
      width={video.thumbnailWidth}
      height={video.thumbnailHeight}
      loading="lazy"
      class="video-thumbnail"
    />
    {video.previewUrl && (
      <video
        preload="none"
        loop
        muted
        playsinline
        class="video-preview"
        data-src={video.previewUrl}
        onerror="this.closest('.video-card').classList.add('video-preview-error');"
      ></video>
    )}
  </div>
  <div class="video-info">
    {headingLevel === 'h2' ? (
      <h2 class="video-title">{video.title}</h2>
    ) : (
      <h3 class="video-title">{video.title}</h3>
    )}
    <p class="video-category">{video.category}</p>
  </div>
</a>

<script>
  document.querySelectorAll('.video-card').forEach(card => {
    const videoPreview = card.querySelector('.video-preview');

    if (videoPreview) {
      let playTimeout; // Gunakan timeout untuk menunda pemutaran

      card.addEventListener('mouseenter', () => {
        // Hapus timeout sebelumnya jika ada
        clearTimeout(playTimeout); 
        
        // Atur timeout untuk memulai pemutaran setelah sedikit penundaan
        playTimeout = setTimeout(() => {
          if (!card.classList.contains('video-preview-error')) {
            const src = videoPreview.getAttribute('data-src');
            if (src && videoPreview.src !== src) {
              videoPreview.src = src;
              videoPreview.load();
            }
            videoPreview.play().catch(e => {
              console.warn('Video playback failed, adding error class:', e);
              card.classList.add('video-preview-error');
            });
          }
        }, 50); // Tunda 500ms (setengah detik)
      });

      card.addEventListener('mouseleave', () => {
        // Hapus timeout jika mouse keluar sebelum video sempat diputar
        clearTimeout(playTimeout); 
        if (videoPreview && !videoPreview.paused) {
          videoPreview.pause();
          videoPreview.currentTime = 0; // Reset ke awal
        }
      });
    }
  });
</script>